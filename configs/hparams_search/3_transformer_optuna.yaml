# @package _global_

# example hyperparameter optimization of some experiment with Optuna:
# python train.py -m hparams_search=mnist_optuna experiment=example

defaults:
  - override /hydra/sweeper: optuna
  - override /logger: mlflow_lightning.yaml
  - override /data: smr_datamodule.yaml

# choose metric which will be optimized by Optuna
# make sure this is the correct name of some metric logged in lightning module!
optimized_metric: "val/f1_best"
tune : True

#data:
#  train_val_split: True
#  cross_validation: True

# here we define Optuna hyperparameter search
# it optimizes for value returned from function with @hydra.main decorator
# docs: https://hydra.cc/docs/next/plugins/optuna_sweeper
hydra:
  mode: "MULTIRUN" # set hydra to multirun by default if this config is attached
  sweeper:
    _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper

    # storage URL to persist optimization results
    # for example, you can use SQLite if you set 'sqlite:///example.db'
    #    storage: sqlite:////${oc.env:PROJECT_ROOT}/logs/${logger.mlflow.experiment_name}.db
    storage: null

    # name of the study to persist optimization results
    study_name: ${logger.mlflow.run_name}

    # number of parallel workers
    n_jobs: 1

    # 'minimize' or 'maximize' the objective
    direction: maximize

    # total number of runs that will be executed
    n_trials: 10

    # choose Optuna hyperparameter sampler
    # you can choose bayesian sampler (tpe), random search (without optimization), grid sampler, and others
    # docs: https://optuna.readthedocs.io/en/stable/reference/samplers.html
    sampler:
      _target_: optuna.samplers.TPESampler
      seed: 1234
      n_startup_trials: 5 # number of random sampling runs before optimization starts
    #      n_startup_trials: 5 # number of random sampling runs before optimization starts

    # define hyperparameter search space
    params:
      model.optimizer.lr: interval(0.0001, 0.1)
      data.batch_size: choice(16, 32, 64)
      model.net.n_filters_time: choice(8, 16, 32, 64)
      model.net.filter_time_length: choice(25, 50, 75)
      model.net.pool_time_length: choice(75, 125, 225, 325)
      model.net.pool_time_stride: choice(15, 25, 50)
      model.net.att_heads: choice(2, 4, 8, 16)
      model.net.att_depth: choice(1, 2, 3, 4, 5)
#      model.net.att_drop_prob: uniform(0.1, 0.5)
#      model.net.drop_prob: uniform(0.1, 0.5)