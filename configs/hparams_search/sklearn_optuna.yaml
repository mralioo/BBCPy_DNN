#parameters = {'excllev': np.concatenate([[None], np.arange(1, 2, 0.1)]),
#              'estimator': [covariance._scm, covariance._lwf], 'n_cmps': [2, 3, 4, 6, 8]}


defaults:
  - override /hydra/sweeper: sklearn

# here we define Optuna hyperparameter search
# it optimizes for value returned from function with @hydra.main decorator
# docs: https://hydra.cc/docs/next/plugins/optuna_sweeper
hydra:
  mode: "MULTIRUN" # set hydra to multirun by default if this config is attached

  sweeper:
    _target_: hydra_plugins.hydra_optuna_sweeper.optuna_sweeper.OptunaSweeper

    # storage URL to persist optimization results
    # for example, you can use SQLite if you set 'sqlite:///example.db'
    storage: null

    # name of the study to persist optimization results
    study_name: null

    # number of parallel workers
    n_jobs: 1

    # 'minimize' or 'maximize' the objective
    direction: maximize

    # total number of runs that will be executed
    n_trials: 2

    # choose Optuna hyperparameter sampler
    # you can choose bayesian sampler (tpe), random search (without optimization), grid sampler, and others
    # docs: https://optuna.readthedocs.io/en/stable/reference/samplers.html
    sampler:
      _target_: optuna.samplers.TPESampler
      seed: 1234
      n_startup_trials: 10 # number of random sampling runs before optimization starts

    # define hyperparameter search space
    params:
      model.steps_config.FeatureExtraction.CSP.n_cmps: choice(2, 3, 4, 6, 8)
      model.steps_config.FeatureExtraction.CSP.excllev: interval(0.1, 1.5)
#      model.steps_config.FeatureExtraction.CSP.estimator: [covariance._scm, covariance._lwf]
